Bootstrap 4.x
-----------------
https://getbootstrap.com/
https://v4-alpha.getbootstrap.com/examples/narrow-jumbotron/
https://getbootstrap.com/docs/4.0/layout/grid/


Comunicación bidireccional con Vue
---------------------------------------
https://tecnops.es/programacion-usando-vuejs-parte-6/

Vue routes
https://appdividend.com/2018/12/28/vue-router-tutorial-with-example-how-to-use-routing-in-vuejs/

Vue Axios
https://www.npmjs.com/package/vue-axios

Tree
https://github.com/zdy1988/vue-jstree

Vuex Ejemplo
https://vuex.vuejs.org/guide/actions.html


Web Cam
-----------------
https://x-team.com/blog/webcam-capture-vue/


SQL server
-----------
https://www.npmjs.com/package/mssql
https://www.youtube.com/watch?v=X84Lz5i_IRs


falta al parecer el modulo 
https://www.npmjs.com/package/tls
instale también tedious
ahora Module not found: Error: Can't resolve 'dgram' in


vue init simple-webpack VueWebPack
scss No
Necesario para el Login.vue
//npm install sass-loader --save-dev
npm install vue-router --save
npm install --save axios vue-axios
npm install --save axios vue-axios
npm install --save vue-jstree
npm install --save vuex




/*
var Connection = require('tedious').Connection;
var config = {
    "server": "localhost\SQLEXPRESS",
    "userName": "sa1",
    "password": "123",
    "options": {
       //"instanceName": "Nombre de la instancia",
       "database": "QuirkyBookProject",
       "rowCollectionOnRequestCompletion": true,
       "rowCollectionOnDone": true
    }
  };
const SqlConnection = new Connection(config);

//const SqlConnection = require("tedious").Connection;
const Request = require("tedious").Request;

function executeQuery(query) {
        let resultEntity = {
            result: {},
            error: null
        };

        return new promise((resolve, reject) => {
            var connection = new SqlConnection(this.config);

            connection.on('connect', function (err) {
                let request = new Request(query, function (err, rowCount, rows) {
                    if (err) {
                        resultEntity.error = err;
                        reject(resultEntity);
                    } else {
                        resultEntity.result = rows;
                        resolve(resultEntity);
                    }

                    connection.close();
                });
                connection.execSql(request);
            }
           );
        });
    }


let jsonSql = require('json-sql');

function createSelectQuery(filter, sort) {
    let sql = jsonSql.build({
       dialect: 'mssql',
       type: 'select',
       table: 'Books',
       fields: ['Id', 'Name'],
       condition: filter,
       sort: sort
    });
  return sql;
 }

 let sql = jsonSql.build({
    table: 'Books', 
    condition: {Name: 'Spyder without duty'},
    sort: {a: 1, b: -1}
});

sql.query = 'select * from "Books" WHERE Nombre = "Spyder without duty" order by "a" asc, "b" desc';
*/
